name: CI DEV

on:
  push:
    branches: [ "dev" ]
permissions:
  contents: read
jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Setting environment variables
        run: |
          echo "AWS_DEFAULT_REGION=ap-northeast-2" >> $GITHUB_ENV
          echo "AWS_SG_NAME=launch-wizard-2" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application.yml
        env:
          spring.datasource.url: ${{ secrets.DEV_DB_URL }}
          spring.datasource.username: ${{ secrets.DEV_DB_USER }}
          spring.datasource.password: ${{ secrets.DEV_DB_PW }}
          spring.cors.origin.local: ${{ secrets.ORIGIN_LOCAL }}
          spring.cors.origin.server: ${{ secrets.ORIGIN_SERVER }}
          cloud.aws.s3.bucket: ${{ secrets.S3_BUCKET_NAME }}
          cloud.aws.s3.root-path: ${{ secrets.S3_ROOT_PATH }}
          cloud.aws.s3.image-directory: ${{ secrets.S3_IMAGE_DIRECTORY }}
          cloud.aws.credentials.access-key: ${{ secrets.S3_ACCESS_KEY }}
          cloud.aws.credentials.secret-key: ${{ secrets.S3_SECRET_KEY }}
          cloud.aws.region.static: ${{ secrets.S3_REGION }}
          jwt.secretKey: ${{ secrets.JWT_KEY }}
          kakao.auth.api-key: ${{ secrets.KAKAO_API_KEY }}
          kakao.auth.client-secret: ${{ secrets.KAKAO_CLIENT_SECRET }}
          kakao.auth.redirect-url: ${{ secrets.KAKAO_REDIRECT_URL }}
          youtube.api-key: ${{ secrets.YOUTUBE_API_KEY }}
          admin-code: ${{ secrets.ADMIN_KEY }}

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.4.2
        with:
          arguments: clean bootJar

      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USER }}/${{ secrets.DOCKER_DEV_CONTAINER }} .

      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PW }}

      - name: docker Hub push
        run: docker push ${{ secrets.DOCKERHUB_USER }}/${{ secrets.DOCKER_DEV_CONTAINER }}

    run-docker-image-on-ec2:
      needs: build-docker-image
      runs-on: self-hosted
      steps:
        - name: docker pull
          run: sudo docker pull ${{ secrets.DOCKERHUB_USER }}/${{ secrets.DOCKER_DEV_CONTAINER }}

        - name: Check if container is running
          run: |
            if [ $(sudo docker ps -q -f name=${{ secrets.DOCKER_DEV_CONTAINER }}) ]; then
              echo "container_running=true" >> $GITHUB_ENV
            else
              echo "container_running=false" >> $GITHUB_ENV
            fi

        - name: docker stop container
          if: env.container_running == 'true'
          run: sudo docker stop ${{ secrets.DOCKER_DEV_CONTAINER }}

        - name: docker remove old container
          if: env.container_running == 'true'
          run: sudo docker rm ${{ secrets.DOCKER_DEV_CONTAINER }}

        - name: docker run new container
          run: sudo docker run --name ${{ secrets.DOCKER_DEV_CONTAINER }} --rm -d -p ${{ secrets.PORT }}:${{ secrets.PORT }} ${{ secrets.DOCKERHUB_USER }}/${{ secrets.DOCKER_DEV_CONTAINER }}

        - name: delete old docker image
          run: sudo docker system prune -f
