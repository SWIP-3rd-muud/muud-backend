name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
permissions:
  contents: read
jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Set Yaml
      uses: microsoft/variable-substitution@v1
      with:
        files: ./src/main/resources/application.yml
      env:
        spring.datasource.url: ${{ secrets.DB_URL }}
        spring.datasource.username: ${{ secrets.DB_USERNAME }}
        spring.datasource.password: ${{ secrets.DB_PASSWORD }}
        spring.cloud.aws.s3.bucket: ${{ secrets.S3_BUCKET_NAME }}
        spring.cloud.aws.s3.root-path: ${{ secrets.S3_ROOT_PATH }}
        spring.cloud.aws.s3.image-directory: ${{ secrets.S3_IMAGE_DIRECTORY }}
        spring.cloud.aws.credentials.access-key: ${{ secrets.S3_ACCESS_KEY }}
        spring.cloud.aws.credentials.secret-key: ${{ secrets.S3_SECRET_KEY }}
        spring.cloud.aws.region.static: ${{ secrets.S3_REGION }}
        jwt.secretKey: ${{ secrets.JWT_KEY }}
        kakao.auth.api-key: ${{ secrets.KAKAO_API_KEY }}
        kakao.auth.client-secret: ${{ secrets.KAKAO_CLIENT_SECRET }}
        kakao.auth.redirect-url: ${{ secrets.KAKAO_REDIRECT_URL }}
        youtube.api-key: ${{ secrets.YOUTUBE_API_KEY }}
        admin-code: ${{ secrets.ADMIN_KEY }}
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: clean bootJar
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.SERVER_CONTAINER_NAME }} .
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.SERVER_CONTAINER_NAME }}

  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: self-hosted
    steps:
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.SERVER_CONTAINER_NAME }}
      - name: Check if container is running
        run: |
          if [ $(docker ps -q -f name=${{ secrets.SERVER_CONTAINER_NAME }}) ]; then
            echo "container_running=true" >> $GITHUB_ENV
          else
            echo "container_running=false" >> $GITHUB_ENV
          fi
      - name: docker stop container
        if: env.container_running == 'true'
        run: sudo docker stop ${{ secrets.SERVER_CONTAINER_NAME }}
      - name: docker run new container
        run: sudo docker run --name ${{ secrets.SERVER_CONTAINER_NAME }} --rm -d -p ${{ secrets.PORT }}:${{ secrets.PORT }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.SERVER_CONTAINER_NAME }}
      - name: delete old docker image
        run: sudo docker system prune -f